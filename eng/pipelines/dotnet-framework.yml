trigger: none
pr: none

resources:
  repositories:
  - repository: VersionsRepo
    type: github
    endpoint: dotnet
    name: dotnet/versions

parameters:
- name: sourceBuildPipelineRunId
  displayName: >
    Source build pipeline run ID. This refers to runs of *this pipeline*.
    Override this parameter in combination with disabling the `Build` stage to
    test or publish images that were built in a different pipeline run. When
    building new images, leave this value alone.
  type: string
  default: $(Build.BuildId)
- name: noCache
  displayName: >
    Run build with no cache. When this is unchecked, the build will use the
    info in the dotnet/versions repo to build only the images which have had
    Dockerfile changes or base images updates. When this is checked, all images
    will be built regardless of caching status.
  type: boolean
  default: false

variables:
- template: /eng/pipelines/variables/common.yml@self
- template: /eng/common/templates/variables/dotnet/secrets${{ iif(contains(variables['Build.DefinitionName'], '-official'), '', '-unofficial') }}.yml@self
- name: manifest
  value: manifest.json
- name: mcrImageIngestionTimeout
  value: "00:30:00"

extends:
  template: /eng/common/templates/1es.yml@self
  parameters:
    reposToExcludeFromScanning:
    - VersionsRepo
    stages:
    - template: /eng/common/templates/stages/dotnet/publish-config-${{ iif(contains(variables['Build.DefinitionName'], '-official'), 'prod', 'nonprod') }}.yml@self
      parameters:
        sourceBuildPipelineRunId: ${{ parameters.sourceBuildPipelineRunId }}
        stagesTemplate: /eng/pipelines/stages/dotnet-framework-base.yml@self
        stagesTemplateParameters:
          versionsRepoRef: VersionsRepo
          sourceBuildPipelineRunId: ${{ parameters.sourceBuildPipelineRunId }}
          noCache: ${{ parameters.noCache }}
          ${{ if contains(variables['Build.DefinitionName'], '-official') }}:
            additionalServiceConnections:
            - name: $(kusto.serviceConnectionName)
            - name: $(marStatus.serviceConnectionName)
